import React, { useState, useEffect } from 'react';
import Papa from 'papaparse';
import { supabase } from './supabase';
import * as yaml from 'js-yaml';

interface Game {
  id: string;
  kickoff_et: string;
  away: string;
  home: string;
  spread_away: number;
  spread_home: number;
  total: number;
  spreads_book: string;
}

interface TeamPick {
  gameId: string;
  team: string; // team name selected
  spread: number; // spread for the selected team
  correct?: boolean; // whether this pick was correct (optional, for future use)
}

interface Pick {
  userId: string;
  week: number;
  picks: TeamPick[];
  correct: number;
}

interface User {
  id: string;
  name: string;
  total: number;
  percentage: number;
}

function App() {
  const [games, setGames] = useState<Game[]>([]);
  const [users] = useState<User[]>([
    { id: 'jacob', name: 'Jacob', total: 0, percentage: 0 },
    { id: 'cam', name: 'Cam', total: 0, percentage: 0 },
    { id: 'connor', name: 'Connor', total: 0, percentage: 0 },
    { id: 'nathan', name: 'Nathan', total: 0, percentage: 0 },
    { id: 'shane', name: 'Shane', total: 0, percentage: 0 },
    { id: 'max', name: 'Max', total: 0, percentage: 0 },
    { id: 'john', name: 'John', total: 0, percentage: 0 },
  ]);
  const [picks, setPicks] = useState<Pick[]>([]);
  const [currentWeek, setCurrentWeek] = useState(2);
  const [selectedUser, setSelectedUser] = useState<string>('jacob');
  const [activeTab, setActiveTab] = useState<'picks' | 'leaderboard' | 'chart' | 'history' | 'insights'>('picks');
  const [teamAbbreviations, setTeamAbbreviations] = useState<{[key: string]: string}>({});

  useEffect(() => {
    // Load games from CSV (we'll create this from your odds script)
    loadGames();
    loadPicks();
    loadTeamAbbreviations();
  }, []);

  const loadGames = async () => {
    try {
      // Load games from CSV file generated by the odds script
      const response = await fetch(`${process.env.PUBLIC_URL}/nfl_lines_week2.csv`);
      const csvText = await response.text();
      
      Papa.parse(csvText, {
        header: true,
        complete: (results) => {
          const csvGames: Game[] = results.data.map((row: any, index: number) => ({
            id: `${index + 1}`,
            kickoff_et: row.kickoff_et,
            away: row.away,
            home: row.home,
            spread_away: parseFloat(row.spread_away),
            spread_home: parseFloat(row.spread_home),
            total: parseFloat(row.total),
            spreads_book: row.spreads_book
          })).filter(game => game.away && game.home); // Filter out empty rows
          
          setGames(csvGames);
        },
        error: (error: any) => {
          console.error('Error parsing CSV:', error);
          // Fallback to sample data if CSV fails to load
          loadSampleGames();
        }
      });
    } catch (error) {
      console.error('Error loading CSV file:', error);
      // Fallback to sample data if CSV fails to load
      loadSampleGames();
    }
  };

  const loadSampleGames = () => {
    // Fallback if CSV fails to load - should not happen in production
    console.error('Failed to load games from CSV');
    setGames([]);
  };

  const loadTeamAbbreviations = async () => {
    try {
      const response = await fetch(`${process.env.PUBLIC_URL}/teamAbbreviations.yaml`);
      if (!response.ok) {
        console.error('Failed to load team abbreviations');
        return;
      }
      const yamlText = await response.text();
      const data = yaml.load(yamlText) as { teams: {[key: string]: string} };
      setTeamAbbreviations(data.teams);
    } catch (error) {
      console.error('Error loading team abbreviations:', error);
    }
  };

  const loadPicks = async () => {
    try {
      const { data, error } = await supabase
        .from('picks')
        .select('*')
        .order('week', { ascending: true });

      if (error) throw error;

      // Group picks by user and week
      const groupedPicks = data.reduce((acc: any, pick: any) => {
        const key = `${pick.user_id}-${pick.week}`;
        if (!acc[key]) {
          acc[key] = {
            userId: pick.user_id,
            week: pick.week,
            picks: [],
            correct: 0
          };
        }
        
        acc[key].picks.push({
          gameId: pick.game_id,
          team: pick.team,
          spread: pick.spread,
          correct: pick.correct
        });
        
        if (pick.correct === true) {
          acc[key].correct++;
        }
        
        return acc;
      }, {});

      const picksArray = Object.values(groupedPicks);
      setPicks(picksArray as Pick[]);
      
    } catch (error) {
      console.error('Error loading picks:', error);
      setPicks([]);
    }
  };

  const savePicks = async (userId: string, week: number, selectedPicks: TeamPick[]) => {
    try {
      // First, delete any existing picks for this user/week
      await supabase
        .from('picks')
        .delete()
        .eq('user_id', userId)
        .eq('week', week);

      // Then insert the new picks
      const pickRecords = selectedPicks.map(pick => ({
        user_id: userId,
        week: week,
        game_id: pick.gameId,
        team: pick.team,
        spread: pick.spread,
        correct: null // Will be set later when games finish
      }));

      const { error } = await supabase
        .from('picks')
        .insert(pickRecords);

      if (error) throw error;

      // Reload picks to update UI
      await loadPicks();
      
      alert('Picks saved successfully!');
      
    } catch (error) {
      console.error('Error saving picks:', error);
      alert('Error saving picks. Please try again.');
    }
  };

  const getCurrentUserPicks = () => {
    return picks.find(p => p.userId === selectedUser && p.week === currentWeek);
  };


  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900">
            2025-26 NFL Spread Pick-Em
          </h1>
        </div>

        {/* Tab Navigation */}
        <div className="mb-8">
          <nav className="flex space-x-4 md:space-x-8 overflow-x-auto pb-2">
            {[
              { key: 'picks', label: 'Make Picks' },
              { key: 'leaderboard', label: 'Leaderboard' },
              { key: 'chart', label: 'Pick Chart' },
              { key: 'history', label: 'Pick History' },
              { key: 'insights', label: 'Insights' }
            ].map(tab => (
              <button
                key={tab.key}
                onClick={() => setActiveTab(tab.key as any)}
                className={`py-2 px-3 border-b-2 font-medium text-sm whitespace-nowrap flex-shrink-0 ${
                  activeTab === tab.key
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                {tab.label}
              </button>
            ))}
          </nav>
        </div>

        {/* Controls - only show on picks and history tabs */}
        {(activeTab === 'picks' || activeTab === 'history') && (
          <>
            {/* User Selection */}
            <div className="mb-8">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Select User
              </label>
              <select
                value={selectedUser}
                onChange={(e) => setSelectedUser(e.target.value)}
                className="block w-full max-w-xs rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                {users.map(user => (
                  <option key={user.id} value={user.id}>
                    {user.name}
                  </option>
                ))}
              </select>
            </div>
          </>
        )}

        {/* Tab Content */}
        {activeTab === 'picks' && (
          <div className="mb-8">
            <h2 className="text-2xl font-semibold text-gray-900 mb-6">
              {users.find(u => u.id === selectedUser)?.name}'s Picks - Week {currentWeek}
            </h2>
            
            <PickInterface
              games={games}
              currentPicks={getCurrentUserPicks()?.picks || []}
              onSavePicks={(picks) => savePicks(selectedUser, currentWeek, picks)}
            />
          </div>
        )}

        {activeTab === 'leaderboard' && (
          <div className="bg-white rounded-lg shadow p-6 mb-8">
            <h2 className="text-2xl font-semibold text-gray-900 mb-4">
              Leaderboard
            </h2>
            <Leaderboard users={users} picks={picks} />
          </div>
        )}

        {activeTab === 'chart' && (
          <div className="bg-white rounded-lg shadow p-6 mb-8">
            <h2 className="text-2xl font-semibold text-gray-900 mb-4">Pick Chart - All Users</h2>
            <PickChart picks={picks} users={users} selectedUser={selectedUser} currentWeek={currentWeek} games={games} teamAbbreviations={teamAbbreviations} />
          </div>
        )}

        {activeTab === 'history' && (
          <div className="bg-white rounded-lg shadow p-6 mb-8">
            <h2 className="text-2xl font-semibold text-gray-900 mb-4">
              Pick History - {users.find(u => u.id === selectedUser)?.name}
            </h2>
            <PickHistory picks={picks} selectedUser={selectedUser} currentWeek={currentWeek} games={games} />
          </div>
        )}

        {activeTab === 'insights' && (
          <div>
            <h2 className="text-2xl font-semibold text-gray-900 mb-4">📊 League Insights</h2>
            <InsightsBeta picks={picks} users={users} games={games} teamAbbreviations={teamAbbreviations} />
          </div>
        )}
      </div>
    </div>
  );
}

interface PickInterfaceProps {
  games: Game[];
  currentPicks: TeamPick[];
  onSavePicks: (picks: TeamPick[]) => void;
}

function PickInterface({ games, currentPicks, onSavePicks }: PickInterfaceProps) {
  const [selectedPicks, setSelectedPicks] = useState<TeamPick[]>(currentPicks);
  const [hasExistingPicks, setHasExistingPicks] = useState<boolean>(currentPicks.length > 0);
  
  // Update selectedPicks when currentPicks changes (e.g., when user changes)
  React.useEffect(() => {
    setSelectedPicks(currentPicks);
    setHasExistingPicks(currentPicks.length > 0);
  }, [currentPicks]);

  const handleTeamToggle = (gameId: string, team: string, spread: number) => {
    // Don't allow changes if the game is locked
    const game = games.find(g => g.id === gameId);
    if (game && isGameLocked(game)) {
      return;
    }

    setSelectedPicks(prev => {
      // Check if this team is already selected
      const existingPickIndex = prev.findIndex(p => p.gameId === gameId && p.team === team);
      
      if (existingPickIndex >= 0) {
        // Remove the selected team
        return prev.filter((_, index) => index !== existingPickIndex);
      }
      
      // Check if the other team from this game is already selected
      const otherTeamIndex = prev.findIndex(p => p.gameId === gameId && p.team !== team);
      
      if (otherTeamIndex >= 0) {
        // Replace the other team selection with this team
        const newPicks = [...prev];
        newPicks[otherTeamIndex] = { gameId, team, spread };
        return newPicks;
      }
      
      // Add new team selection if less than 3 picks
      if (prev.length < 3) {
        return [...prev, { gameId, team, spread }];
      }
      
      // Can't add more than 3 picks
      return prev;
    });
  };

  const handleSave = () => {
    if (selectedPicks.length === 3) {
      onSavePicks(selectedPicks);
    }
  };

  // Check if current picks are different from original picks
  const arePicksModified = () => {
    if (!hasExistingPicks && selectedPicks.length > 0) return true;
    if (hasExistingPicks && selectedPicks.length !== currentPicks.length) return true;
    
    // Check if any picks have changed
    return selectedPicks.some(pick => {
      const originalPick = currentPicks.find(op => op.gameId === pick.gameId);
      return !originalPick || originalPick.team !== pick.team || originalPick.spread !== pick.spread;
    });
  };

  const getButtonText = () => {
    if (!hasExistingPicks) {
      return `Save Picks (${selectedPicks.length}/3)`;
    } else if (arePicksModified()) {
      return `Update Picks (${selectedPicks.length}/3)`;
    } else {
      return `Picks Saved (${selectedPicks.length}/3)`;
    }
  };

  const formatGameTime = (kickoffEt: string) => {
    const date = new Date(kickoffEt);
    
    // Get user's timezone for display
    const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    const timezoneAbbr = new Date().toLocaleTimeString('en-US', { 
      timeZoneName: 'short' 
    }).split(' ')[2];
    
    return date.toLocaleDateString('en-US', { 
      weekday: 'short',
      month: 'short', 
      day: 'numeric',
      hour: 'numeric',
      minute: '2-digit',
      timeZone: userTimezone
    }) + ` ${timezoneAbbr}`;
  };


  const getGameSelectionState = (gameId: string) => {
    const gamePick = selectedPicks.find(p => p.gameId === gameId);
    return gamePick ? gamePick.team : null;
  };

  const isGameLocked = (game: Game) => {
    const gameTime = new Date(game.kickoff_et);
    const now = new Date();
    return now >= gameTime;
  };

  const getMascotName = (teamName: string) => {
    // Extract just the mascot (last word) from full team name
    return teamName.split(' ').slice(-1)[0];
  };

  const getTeamLogo = (teamName: string) => {
    // Simple mapping of team names to logo URLs (using ESPN's logos)
    const teamLogos: { [key: string]: string } = {
      'Dallas Cowboys': 'https://a.espncdn.com/i/teamlogos/nfl/500/dal.png',
      'Philadelphia Eagles': 'https://a.espncdn.com/i/teamlogos/nfl/500/phi.png',
      'Kansas City Chiefs': 'https://a.espncdn.com/i/teamlogos/nfl/500/kc.png',
      'Los Angeles Chargers': 'https://a.espncdn.com/i/teamlogos/nfl/500/lac.png',
      'Arizona Cardinals': 'https://a.espncdn.com/i/teamlogos/nfl/500/ari.png',
      'New Orleans Saints': 'https://a.espncdn.com/i/teamlogos/nfl/500/no.png',
      'Tampa Bay Buccaneers': 'https://a.espncdn.com/i/teamlogos/nfl/500/tb.png',
      'Atlanta Falcons': 'https://a.espncdn.com/i/teamlogos/nfl/500/atl.png',
      'Carolina Panthers': 'https://a.espncdn.com/i/teamlogos/nfl/500/car.png',
      'Jacksonville Jaguars': 'https://a.espncdn.com/i/teamlogos/nfl/500/jax.png',
      'Cincinnati Bengals': 'https://a.espncdn.com/i/teamlogos/nfl/500/cin.png',
      'Cleveland Browns': 'https://a.espncdn.com/i/teamlogos/nfl/500/cle.png',
      'Miami Dolphins': 'https://a.espncdn.com/i/teamlogos/nfl/500/mia.png',
      'Indianapolis Colts': 'https://a.espncdn.com/i/teamlogos/nfl/500/ind.png',
      'Las Vegas Raiders': 'https://a.espncdn.com/i/teamlogos/nfl/500/lv.png',
      'New England Patriots': 'https://a.espncdn.com/i/teamlogos/nfl/500/ne.png',
      'New York Giants': 'https://a.espncdn.com/i/teamlogos/nfl/500/nyg.png',
      'Washington Commanders': 'https://a.espncdn.com/i/teamlogos/nfl/500/wsh.png',
      'Pittsburgh Steelers': 'https://a.espncdn.com/i/teamlogos/nfl/500/pit.png',
      'New York Jets': 'https://a.espncdn.com/i/teamlogos/nfl/500/nyj.png',
      'Tennessee Titans': 'https://a.espncdn.com/i/teamlogos/nfl/500/ten.png',
      'Denver Broncos': 'https://a.espncdn.com/i/teamlogos/nfl/500/den.png',
      'San Francisco 49ers': 'https://a.espncdn.com/i/teamlogos/nfl/500/sf.png',
      'Seattle Seahawks': 'https://a.espncdn.com/i/teamlogos/nfl/500/sea.png',
      'Detroit Lions': 'https://a.espncdn.com/i/teamlogos/nfl/500/det.png',
      'Green Bay Packers': 'https://a.espncdn.com/i/teamlogos/nfl/500/gb.png',
      'Houston Texans': 'https://a.espncdn.com/i/teamlogos/nfl/500/hou.png',
      'Los Angeles Rams': 'https://a.espncdn.com/i/teamlogos/nfl/500/lar.png',
      'Baltimore Ravens': 'https://a.espncdn.com/i/teamlogos/nfl/500/bal.png',
      'Buffalo Bills': 'https://a.espncdn.com/i/teamlogos/nfl/500/buf.png',
      'Minnesota Vikings': 'https://a.espncdn.com/i/teamlogos/nfl/500/min.png',
      'Chicago Bears': 'https://a.espncdn.com/i/teamlogos/nfl/500/chi.png'
    };
    return teamLogos[teamName] || '';
  };

  return (
    <div>
      <div className="mb-4">
        <p className="text-sm text-gray-600">
          {hasExistingPicks 
            ? `Update your picks - Select exactly 3 teams (${selectedPicks.length}/3 selected)`
            : `Select exactly 3 teams (${selectedPicks.length}/3 selected)`
          }
        </p>
        {hasExistingPicks && !arePicksModified() && selectedPicks.length === 3 && (
          <p className="text-sm text-green-600 mt-1">
            ✓ Your picks have been saved. Make changes to update them.
          </p>
        )}
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        {games.map(game => {
          const selectedTeam = getGameSelectionState(game.id);
          const canSelect = selectedPicks.length < 3 || selectedTeam !== null;
          const gameLocked = isGameLocked(game);
          
          return (
            <div key={game.id} className={`border rounded-lg p-4 shadow-md transition-shadow ${
              gameLocked ? 'bg-gray-50 border-gray-300' : 'bg-white hover:shadow-lg'
            }`}>
              <div className="mb-4">
                <div className="flex items-center justify-between">
                  <div>
                    <span className={`text-lg font-bold ${gameLocked ? 'text-gray-500' : 'text-gray-900'}`}>
                      {getMascotName(game.away)} @ {getMascotName(game.home)}
                    </span>
                    <span className={`text-sm ml-3 ${gameLocked ? 'text-gray-400' : 'text-gray-500'}`}>
                      {formatGameTime(game.kickoff_et)}
                    </span>
                  </div>
                  {gameLocked && (
                    <div className="flex items-center text-red-600">
                      <svg className="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                      </svg>
                      <span className="text-xs font-medium">LOCKED</span>
                    </div>
                  )}
                </div>
              </div>
              
              <div className="space-y-3">
                {/* Away Team Option */}
                <div 
                  className={`flex items-center space-x-3 p-3 rounded border transition-colors ${
                    gameLocked
                      ? 'border-gray-300 bg-gray-100 cursor-not-allowed opacity-60'
                      : selectedTeam === game.away
                        ? 'border-blue-500 bg-blue-50 cursor-pointer' 
                        : canSelect
                          ? 'border-gray-200 hover:border-gray-300 hover:bg-gray-50 cursor-pointer'
                          : 'border-gray-200 bg-gray-100 cursor-not-allowed opacity-50'
                  }`}
                  onClick={() => !gameLocked && canSelect && handleTeamToggle(game.id, game.away, game.spread_away)}
                >
                  <input
                    type="radio"
                    name={`game-${game.id}`}
                    checked={selectedTeam === game.away}
                    onChange={() => !gameLocked && canSelect && handleTeamToggle(game.id, game.away, game.spread_away)}
                    disabled={!canSelect || gameLocked}
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500"
                  />
                  {getTeamLogo(game.away) && (
                    <img 
                      src={getTeamLogo(game.away)} 
                      alt={game.away}
                      className="w-8 h-8 object-contain"
                      onError={(e) => { e.currentTarget.style.display = 'none'; }}
                    />
                  )}
                  <div className="flex-1">
                    <div className={`font-medium text-lg ${
                      gameLocked ? 'text-gray-500' : 'text-gray-900'
                    }`}>
                      {game.away}
                    </div>
                    <div className={`text-lg font-bold ${
                      gameLocked ? 'text-gray-400' : 'text-blue-600'
                    }`}>
                      {game.spread_away > 0 ? `+${game.spread_away}` : game.spread_away}
                    </div>
                  </div>
                </div>

                {/* Home Team Option */}
                <div 
                  className={`flex items-center space-x-3 p-3 rounded border transition-colors ${
                    gameLocked
                      ? 'border-gray-300 bg-gray-100 cursor-not-allowed opacity-60'
                      : selectedTeam === game.home
                        ? 'border-blue-500 bg-blue-50 cursor-pointer' 
                        : canSelect
                          ? 'border-gray-200 hover:border-gray-300 hover:bg-gray-50 cursor-pointer'
                          : 'border-gray-200 bg-gray-100 cursor-not-allowed opacity-50'
                  }`}
                  onClick={() => !gameLocked && canSelect && handleTeamToggle(game.id, game.home, game.spread_home)}
                >
                  <input
                    type="radio"
                    name={`game-${game.id}`}
                    checked={selectedTeam === game.home}
                    onChange={() => !gameLocked && canSelect && handleTeamToggle(game.id, game.home, game.spread_home)}
                    disabled={!canSelect || gameLocked}
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500"
                  />
                  {getTeamLogo(game.home) && (
                    <img 
                      src={getTeamLogo(game.home)} 
                      alt={game.home}
                      className="w-8 h-8 object-contain"
                      onError={(e) => { e.currentTarget.style.display = 'none'; }}
                    />
                  )}
                  <div className="flex-1">
                    <div className={`font-medium text-lg ${
                      gameLocked ? 'text-gray-500' : 'text-gray-900'
                    }`}>
                      {game.home}
                    </div>
                    <div className={`text-lg font-bold ${
                      gameLocked ? 'text-gray-400' : 'text-blue-600'
                    }`}>
                      {game.spread_home > 0 ? `+${game.spread_home}` : game.spread_home}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      <button
        onClick={handleSave}
        disabled={selectedPicks.length !== 3 || (hasExistingPicks && !arePicksModified())}
        className={`w-full py-2 px-4 rounded-md ${
          selectedPicks.length !== 3 
            ? 'bg-gray-400 text-white cursor-not-allowed'
            : hasExistingPicks && !arePicksModified()
              ? 'bg-green-600 text-white cursor-not-allowed'
              : hasExistingPicks && arePicksModified()
                ? 'bg-orange-600 text-white hover:bg-orange-700'
                : 'bg-blue-600 text-white hover:bg-blue-700'
        }`}
      >
        {getButtonText()}
      </button>
    </div>
  );
}

interface LeaderboardProps {
  users: User[];
  picks: Pick[];
}

interface PickChartProps {
  picks: Pick[];
  users: User[];
  selectedUser: string;
  currentWeek: number;
  games: Game[];
  teamAbbreviations: {[key: string]: string};
}

interface PickHistoryProps {
  picks: Pick[];
  selectedUser: string;
  currentWeek: number;
  games: Game[];
}

function Leaderboard({ users, picks }: LeaderboardProps) {
  const getUserTotalCorrect = (userId: string) => {
    return picks.filter(p => p.userId === userId).reduce((sum, pick) => sum + pick.correct, 0);
  };

  const getUserTotalPicks = (userId: string) => {
    // Only count picks that have been graded (correct is not null/undefined)
    return picks.filter(p => p.userId === userId).reduce((sum, pick) => {
      return sum + pick.picks.filter(teamPick => teamPick.correct !== null && teamPick.correct !== undefined).length;
    }, 0);
  };

  const getUserPercentage = (userId: string) => {
    const total = getUserTotalPicks(userId);
    if (total === 0) return 0;
    return Math.round((getUserTotalCorrect(userId) / total) * 100);
  };

  // Create leaderboard data with calculated stats
  const leaderboardData = users.map(user => ({
    id: user.id,
    name: user.name,
    totalCorrect: getUserTotalCorrect(user.id),
    totalPicks: getUserTotalPicks(user.id),
    percentage: getUserPercentage(user.id)
  })).sort((a, b) => {
    // Sort by percentage first, then by total correct
    if (b.percentage !== a.percentage) {
      return b.percentage - a.percentage;
    }
    return b.totalCorrect - a.totalCorrect;
  });

  // Group stats
  const groupStats = {
    totalCorrect: leaderboardData.reduce((sum, user) => sum + user.totalCorrect, 0),
    totalPicks: leaderboardData.reduce((sum, user) => sum + user.totalPicks, 0)
  };
  const groupPercentage = groupStats.totalPicks > 0 ? Math.round((groupStats.totalCorrect / groupStats.totalPicks) * 100) : 0;

  return (
    <div>
      {/* Group Performance Summary */}
      <div className="mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
        <div className="text-center">
          <h3 className="text-lg font-semibold text-blue-900 mb-2">League Performance</h3>
          <div className="flex justify-center items-center space-x-8">
            <div className="text-center">
              <div className="text-3xl font-bold text-blue-600">
                {groupStats.totalCorrect}/{groupStats.totalPicks}
              </div>
              <div className="text-sm text-blue-700">Total Correct Picks</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-blue-600">
                {groupPercentage}%
              </div>
              <div className="text-sm text-blue-700">League Success Rate</div>
            </div>
          </div>
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Rank
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Correct
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Total
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Percentage
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {leaderboardData.map((user, index) => {
              const isTopPerformer = index === 0 && user.percentage > 0;
              return (
                <tr key={user.id} className={isTopPerformer ? 'bg-yellow-50' : ''}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    <div className="flex items-center">
                      {index === 0 && user.percentage > 0 && <span className="text-yellow-500 mr-2">🏆</span>}
                      #{index + 1}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {user.name}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    <span className="font-semibold">{user.totalCorrect}</span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {user.totalPicks}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    <span className={`font-semibold px-2 py-1 rounded ${
                      user.percentage >= 60 ? 'bg-green-100 text-green-800' :
                      user.percentage >= 50 ? 'bg-yellow-100 text-yellow-800' :
                      user.percentage > 0 ? 'bg-red-100 text-red-800' :
                      'bg-gray-100 text-gray-500'
                    }`}>
                      {user.percentage}%
                    </span>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  );
}

function PickChart({ picks, users, selectedUser, currentWeek, games, teamAbbreviations }: PickChartProps) {
  const weeks = Array.from({ length: 18 }, (_, i) => i + 1);
  
  const getPickInfo = (pick: TeamPick) => {
    // Use team abbreviation from YAML mapping
    const teamAbbr = teamAbbreviations[pick.team] || pick.team.split(' ').slice(-1)[0].substring(0, 3).toUpperCase();
    return `${teamAbbr} ${pick.spread > 0 ? '+' : ''}${pick.spread}`;
  };

  const getUserTotalCorrect = (userId: string) => {
    return picks.filter(p => p.userId === userId).reduce((sum, pick) => sum + pick.correct, 0);
  };

  const getUserTotalPicks = (userId: string) => {
    // Only count picks that have been graded (correct is not null/undefined)
    return picks.filter(p => p.userId === userId).reduce((sum, pick) => {
      return sum + pick.picks.filter(teamPick => teamPick.correct !== null && teamPick.correct !== undefined).length;
    }, 0);
  };

  const getUserPercentage = (userId: string) => {
    const total = getUserTotalPicks(userId);
    if (total === 0) return 0;
    return Math.round((getUserTotalCorrect(userId) / total) * 100);
  };

  const getGroupTotals = () => {
    const totalCorrect = users.reduce((sum, user) => sum + getUserTotalCorrect(user.id), 0);
    const totalPicks = users.reduce((sum, user) => sum + getUserTotalPicks(user.id), 0);
    const percentage = totalPicks > 0 ? Math.round((totalCorrect / totalPicks) * 100) : 0;
    
    return { totalCorrect, totalPicks, percentage };
  };

  const groupTotals = getGroupTotals();

  const getWeekGroupTotals = (week: number) => {
    const weekPicks = picks.filter(p => p.week === week);
    // Only count picks that have been graded (correct is not null/undefined)
    const gradedPicks = weekPicks.reduce((acc, userWeek) => {
      return acc + userWeek.picks.filter(teamPick => teamPick.correct !== null && teamPick.correct !== undefined).length;
    }, 0);
    const totalCorrect = weekPicks.reduce((sum, userWeek) => sum + userWeek.correct, 0);
    const percentage = gradedPicks > 0 ? Math.round((totalCorrect / gradedPicks) * 100) : 0;
    
    return { totalCorrect, totalPicks: gradedPicks, percentage };
  };

  return (
    <div>
      {/* Group Total KPI */}
      <div className="mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
        <div className="text-center">
          <h3 className="text-lg font-semibold text-blue-900 mb-2">Group Performance</h3>
          <div className="flex justify-center items-center space-x-8">
            <div className="text-center">
              <div className="text-3xl font-bold text-blue-600">
                {groupTotals.totalCorrect}/{groupTotals.totalPicks}
              </div>
              <div className="text-sm text-blue-700">Correct Picks</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-blue-600">
                {groupTotals.percentage}%
              </div>
              <div className="text-sm text-blue-700">Success Rate</div>
            </div>
          </div>
        </div>
      </div>
      
      <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200 text-xs">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase">User</th>
            <th className="px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase">Total</th>
            <th className="px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase">%</th>
            {weeks.map(week => (
              <th key={week} className="px-1 py-2 text-center text-xs font-medium text-gray-500 uppercase">
                W{week}
              </th>
            ))}
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {users.map(user => {
            const userPicks = picks.filter(p => p.userId === user.id);
            const totalCorrect = getUserTotalCorrect(user.id);
            const percentage = getUserPercentage(user.id);
            
            return (
              <tr key={user.id} className="hover:bg-gray-50">
                <td className="px-2 py-2 whitespace-nowrap text-sm font-medium text-gray-900">
                  {user.name}
                </td>
                <td className="px-2 py-2 whitespace-nowrap text-sm text-center font-semibold text-gray-900">
                  {totalCorrect}
                </td>
                <td className="px-2 py-2 whitespace-nowrap text-sm text-center font-semibold text-gray-900">
                  {percentage}%
                </td>
                {weeks.map(week => {
                  const weekPick = userPicks.find(p => p.week === week);
                  const isCurrentWeek = week === currentWeek;
                  
                  return (
                    <td key={week} className={`px-1 py-2 text-center text-xs ${isCurrentWeek ? 'bg-blue-50' : ''}`}>
                      {weekPick ? (
                        <div className="text-left">
                          {weekPick.picks.map((pick, idx) => {
                            const isPending = pick.correct === null || pick.correct === undefined;
                            const textColorClass = isPending 
                              ? 'text-gray-400' 
                              : pick.correct 
                                ? 'text-green-600 font-medium' 
                                : 'text-red-500';
                            const resultIcon = isPending ? '⏳' : pick.correct ? '✅' : '❌';
                            
                            return (
                              <div key={idx} className="border-b border-gray-100 py-1 last:border-b-0">
                                <div className="flex items-center justify-between">
                                  <span className={`text-xs ${textColorClass}`}>
                                    {getPickInfo(pick)}
                                  </span>
                                  <span className="ml-1">
                                    {resultIcon}
                                  </span>
                                </div>
                              </div>
                            );
                          })}
                          <div className="font-semibold text-gray-700 text-xs mt-1 pt-1 border-t border-gray-200">
                            {weekPick.correct}/3
                          </div>
                        </div>
                      ) : (
                        <span className="text-gray-400">-</span>
                      )}
                    </td>
                  );
                })}
              </tr>
            );
          })}
          
          {/* Group Total Row */}
          <tr className="bg-gray-100 border-t-2 border-gray-300 font-semibold">
            <td className="px-2 py-2 whitespace-nowrap text-sm font-bold text-gray-900">
              GROUP TOTAL
            </td>
            <td className="px-2 py-2 whitespace-nowrap text-sm text-center font-bold text-gray-900">
              {groupTotals.totalCorrect}
            </td>
            <td className="px-2 py-2 whitespace-nowrap text-sm text-center font-bold text-gray-900">
              {groupTotals.percentage}%
            </td>
            {weeks.map(week => {
              const weekGroupTotals = getWeekGroupTotals(week);
              const isCurrentWeek = week === currentWeek;
              
              return (
                <td key={week} className={`px-1 py-2 text-center text-xs font-bold ${isCurrentWeek ? 'bg-blue-100' : 'bg-gray-100'}`}>
                  {weekGroupTotals.totalPicks > 0 ? (
                    <div className="text-center">
                      <div className="text-sm font-bold text-gray-900">
                        {weekGroupTotals.totalCorrect}/{weekGroupTotals.totalPicks}
                      </div>
                      <div className="text-xs text-gray-700">
                        {weekGroupTotals.percentage}%
                      </div>
                    </div>
                  ) : (
                    <span className="text-gray-400">-</span>
                  )}
                </td>
              );
            })}
          </tr>
        </tbody>
      </table>
      </div>
    </div>
  );
}

function PickHistory({ picks, selectedUser, currentWeek, games }: PickHistoryProps) {
  const weeks = Array.from({ length: 18 }, (_, i) => i + 1);
  const userPicks = picks.filter(pick => pick.userId === selectedUser);
  
  const getPickInfo = (pick: TeamPick) => {
    // Extract just the mascot name for history view
    const mascotName = pick.team.split(' ').slice(-1)[0]; // Gets "Cowboys" from "Dallas Cowboys"
    const game = games.find(g => g.id === pick.gameId);
    if (!game) return `${mascotName} (${pick.spread > 0 ? '+' : ''}${pick.spread})`;
    
    const opponent = pick.team === game.away ? game.home : game.away;
    const opponentMascot = opponent.split(' ').slice(-1)[0]; // Gets mascot from opponent too
    const location = pick.team === game.away ? '@' : 'vs';
    return `${mascotName} ${location} ${opponentMascot} (${pick.spread > 0 ? '+' : ''}${pick.spread})`;
  };
  
  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Week</th>
            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Pick 1</th>
            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Pick 2</th>
            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Pick 3</th>
            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Correct</th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {weeks.map((week) => {
            const weekPick = userPicks.find(p => p.week === week);
            const isCurrentWeek = week === currentWeek;
            
            return (
              <tr key={week} className={isCurrentWeek ? 'bg-blue-50' : ''}>
                <td className={`px-4 py-3 whitespace-nowrap text-sm font-medium ${isCurrentWeek ? 'text-blue-900' : 'text-gray-900'}`}>
                  Week {week}
                </td>
                <td className={`px-4 py-3 whitespace-nowrap text-sm ${
                  weekPick?.picks[0] 
                    ? weekPick.picks[0].correct === null || weekPick.picks[0].correct === undefined
                      ? 'text-gray-400'
                      : weekPick.picks[0].correct 
                        ? 'text-green-600 font-medium' 
                        : 'text-red-500' 
                    : 'text-gray-500'
                }`}>
                  {weekPick?.picks[0] ? getPickInfo(weekPick.picks[0]) : '-'}
                </td>
                <td className={`px-4 py-3 whitespace-nowrap text-sm ${
                  weekPick?.picks[1] 
                    ? weekPick.picks[1].correct === null || weekPick.picks[1].correct === undefined
                      ? 'text-gray-400'
                      : weekPick.picks[1].correct 
                        ? 'text-green-600 font-medium' 
                        : 'text-red-500' 
                    : 'text-gray-500'
                }`}>
                  {weekPick?.picks[1] ? getPickInfo(weekPick.picks[1]) : '-'}
                </td>
                <td className={`px-4 py-3 whitespace-nowrap text-sm ${
                  weekPick?.picks[2] 
                    ? weekPick.picks[2].correct === null || weekPick.picks[2].correct === undefined
                      ? 'text-gray-400'
                      : weekPick.picks[2].correct 
                        ? 'text-green-600 font-medium' 
                        : 'text-red-500' 
                    : 'text-gray-500'
                }`}>
                  {weekPick?.picks[2] ? getPickInfo(weekPick.picks[2]) : '-'}
                </td>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                  {weekPick ? `${weekPick.correct}/3` : '-'}
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
      
      {userPicks.length === 0 && (
        <div className="text-center py-8 text-gray-500">
          No picks found for this user.
        </div>
      )}
    </div>
  );
}

interface InsightsBetaProps {
  picks: Pick[];
  users: User[];
  games: Game[];
  teamAbbreviations: { [key: string]: string };
}

function InsightsBeta({ picks, users, games, teamAbbreviations }: InsightsBetaProps) {
  const [spreadViewMode, setSpreadViewMode] = useState<'absolute' | 'signed'>('absolute');
  
  // Helper function to get all graded team picks
  const getAllGradedPicks = () => {
    return picks.flatMap(userPick => 
      userPick.picks.filter(teamPick => teamPick.correct !== null && teamPick.correct !== undefined)
    );
  };

  // Helper function to find game data for a pick
  const getGameForPick = (teamPick: TeamPick) => {
    return games.find(game => 
      game.id === teamPick.gameId || 
      game.away === teamPick.team || 
      game.home === teamPick.team
    );
  };

  const gradedPicks = getAllGradedPicks();

  // Underdog vs Favorite Analytics
  const getUnderdogFavoriteAnalytics = () => {
    let favoriteStats = { picked: 0, correct: 0 };
    let underdogStats = { picked: 0, correct: 0 };

    gradedPicks.forEach(pick => {
      const spread = pick.spread;
      if (spread < 0) { // Negative spread = favorite
        favoriteStats.picked++;
        if (pick.correct) favoriteStats.correct++;
      } else { // Positive spread = underdog
        underdogStats.picked++;
        if (pick.correct) underdogStats.correct++;
      }
    });

    return {
      favorites: {
        ...favoriteStats,
        percentage: favoriteStats.picked > 0 ? Math.round((favoriteStats.correct / favoriteStats.picked) * 100) : 0
      },
      underdogs: {
        ...underdogStats,
        percentage: underdogStats.picked > 0 ? Math.round((underdogStats.correct / underdogStats.picked) * 100) : 0
      }
    };
  };

  // Home vs Away Analytics
  const getHomeAwayAnalytics = () => {
    let homeStats = { picked: 0, correct: 0 };
    let awayStats = { picked: 0, correct: 0 };

    gradedPicks.forEach(pick => {
      const game = getGameForPick(pick);
      if (!game) return;

      if (game.home === pick.team) {
        homeStats.picked++;
        if (pick.correct) homeStats.correct++;
      } else {
        awayStats.picked++;
        if (pick.correct) awayStats.correct++;
      }
    });

    return {
      home: {
        ...homeStats,
        percentage: homeStats.picked > 0 ? Math.round((homeStats.correct / homeStats.picked) * 100) : 0
      },
      away: {
        ...awayStats,
        percentage: awayStats.picked > 0 ? Math.round((awayStats.correct / awayStats.picked) * 100) : 0
      }
    };
  };

  // Spread Range Analytics
  const getSpreadAnalytics = () => {
    const spreadRanges: { [key: string]: { picked: number; correct: number } } = {};
    
    gradedPicks.forEach(pick => {
      const spread = pick.spread;
      let range;
      
      if (spreadViewMode === 'absolute') {
        const absSpread = Math.abs(spread);
        if (absSpread <= 3) range = '0-3 pts';
        else if (absSpread <= 6) range = '3.5-6 pts';
        else if (absSpread <= 10) range = '6.5-10 pts';
        else range = '10.5+ pts';
      } else {
        // Signed mode - separate favorites and underdogs
        const absSpread = Math.abs(spread);
        const isFavorite = spread < 0;
        const prefix = isFavorite ? 'Favorite' : 'Underdog';
        
        if (absSpread <= 3) range = `${prefix} 0-3 pts`;
        else if (absSpread <= 6) range = `${prefix} 3.5-6 pts`;
        else if (absSpread <= 10) range = `${prefix} 6.5-10 pts`;
        else range = `${prefix} 10.5+ pts`;
      }

      if (!spreadRanges[range]) {
        spreadRanges[range] = { picked: 0, correct: 0 };
      }
      spreadRanges[range].picked++;
      if (pick.correct) spreadRanges[range].correct++;
    });

    const entries = Object.entries(spreadRanges)
      .map(([range, stats]) => ({
        range,
        picked: stats.picked,
        correct: stats.correct,
        percentage: Math.round((stats.correct / stats.picked) * 100)
      }));

    // Sort based on view mode
    if (spreadViewMode === 'absolute') {
      const order = ['0-3 pts', '3.5-6 pts', '6.5-10 pts', '10.5+ pts'];
      return entries.sort((a, b) => order.indexOf(a.range) - order.indexOf(b.range));
    } else {
      // Sort like histogram: high underdogs at top, then high favorites at bottom
      const order = [
        'Underdog 10.5+ pts', 'Underdog 6.5-10 pts', 'Underdog 3.5-6 pts', 'Underdog 0-3 pts',
        'Favorite 0-3 pts', 'Favorite 3.5-6 pts', 'Favorite 6.5-10 pts', 'Favorite 10.5+ pts'
      ];
      return entries.sort((a, b) => order.indexOf(a.range) - order.indexOf(b.range));
    }
  };

  // Most Popular Teams Analytics
  const getMostPopularTeams = () => {
    const teamStats: { [key: string]: { picked: number; correct: number } } = {};
    
    gradedPicks.forEach(pick => {
      const team = pick.team;
      if (!teamStats[team]) {
        teamStats[team] = { picked: 0, correct: 0 };
      }
      teamStats[team].picked++;
      if (pick.correct) teamStats[team].correct++;
    });

    return Object.entries(teamStats)
      .map(([team, stats]) => ({
        team,
        picked: stats.picked,
        correct: stats.correct,
        percentage: Math.round((stats.correct / stats.picked) * 100)
      }))
      .sort((a, b) => b.picked - a.picked) // Sort by most picked
      .slice(0, 10); // Top 10 most popular
  };

  const underdogFavorite = getUnderdogFavoriteAnalytics();
  const homeAway = getHomeAwayAnalytics();
  const spreadAnalytics = getSpreadAnalytics();
  const mostPopularTeams = getMostPopularTeams();

  // Find the absolute maximum across ALL categories for consistent scaling
  const allData = [
    underdogFavorite.favorites,
    underdogFavorite.underdogs,
    homeAway.home,
    homeAway.away,
    ...spreadAnalytics,
    ...mostPopularTeams
  ];
  const globalMaxVolume = Math.max(...allData.map(d => d.picked));

  const BarChart = ({ label, data }: { 
    label: string; 
    data: { picked: number; correct: number; percentage: number };
  }) => {
    const barWidth = globalMaxVolume > 0 ? (data.picked / globalMaxVolume) * 100 : 0;
    const correctWidth = data.picked > 0 ? (data.correct / data.picked) * 100 : 0;

    return (
      <div className="flex items-center py-2">
        {/* Table-like columns */}
        <div className="font-semibold text-base text-gray-900 w-32 text-left">{label}</div>
        <div className="text-sm text-gray-600 w-16 text-center">{data.correct}</div>
        <div className="text-sm text-gray-600 w-16 text-center">{data.picked}</div>
        <div className="text-sm font-semibold text-gray-900 w-20 text-center">{data.percentage}%</div>
        
        {/* Bar Chart */}
        <div className="flex-1 ml-6">
          <div 
            className="h-6 bg-gray-300 rounded relative"
            style={{ width: `${barWidth}%`, minWidth: '80px' }}
          >
            <div 
              className="h-full bg-green-500 rounded transition-all duration-500"
              style={{ width: `${correctWidth}%` }}
            />
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-8">
      {/* Overview Stats KPI Tiles */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="bg-blue-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-blue-600">{gradedPicks.length}</div>
          <div className="text-sm text-blue-700">Total Picks Analyzed</div>
        </div>
        <div className="bg-green-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-green-600">{gradedPicks.filter(p => p.correct).length}</div>
          <div className="text-sm text-green-700">Correct Picks</div>
        </div>
        <div className="bg-red-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-red-600">{gradedPicks.filter(p => !p.correct).length}</div>
          <div className="text-sm text-red-700">Incorrect Picks</div>
        </div>
        <div className="bg-purple-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-purple-600">{mostPopularTeams.length}</div>
          <div className="text-sm text-purple-700">Teams Picked</div>
        </div>
      </div>

      {/* Favorites vs Underdogs */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">🎯 Favorites vs Underdogs</h3>
        <div className="bg-white p-6 rounded-lg shadow-md">
          {/* Header Row */}
          <div className="flex items-center py-2 mb-2 border-b border-gray-100">
            <div className="text-xs font-medium text-gray-400 w-32 text-left">CATEGORY</div>
            <div className="text-xs font-medium text-gray-400 w-16 text-center">CORRECT</div>
            <div className="text-xs font-medium text-gray-400 w-16 text-center">TOTAL</div>
            <div className="text-xs font-medium text-gray-400 w-20 text-center">SUCCESS</div>
            <div className="text-xs font-medium text-gray-400 flex-1 ml-6">VOLUME</div>
          </div>
          <div className="space-y-1">
            <BarChart 
              label="Favorites (-)" 
              data={underdogFavorite.favorites}
            />
            <BarChart 
              label="Underdogs (+)" 
              data={underdogFavorite.underdogs}
            />
          </div>
        </div>
      </div>

      {/* Home vs Away */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">🏠 Home vs Away Teams</h3>
        <div className="bg-white p-6 rounded-lg shadow-md">
          {/* Header Row */}
          <div className="flex items-center py-2 mb-2 border-b border-gray-100">
            <div className="text-xs font-medium text-gray-400 w-32 text-left">CATEGORY</div>
            <div className="text-xs font-medium text-gray-400 w-16 text-center">CORRECT</div>
            <div className="text-xs font-medium text-gray-400 w-16 text-center">TOTAL</div>
            <div className="text-xs font-medium text-gray-400 w-20 text-center">SUCCESS</div>
            <div className="text-xs font-medium text-gray-400 flex-1 ml-6">VOLUME</div>
          </div>
          <div className="space-y-1">
            <BarChart 
              label="Home Teams" 
              data={homeAway.home}
            />
            <BarChart 
              label="Away Teams" 
              data={homeAway.away}
            />
          </div>
        </div>
      </div>

      {/* Spread Ranges */}
      <div>
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-gray-900">📊 Performance by Spread Size</h3>
          <div className="flex items-center space-x-2">
            <span className="text-sm text-gray-600">Absolute Spread</span>
            <button
              onClick={() => setSpreadViewMode(spreadViewMode === 'absolute' ? 'signed' : 'absolute')}
              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${
                spreadViewMode === 'signed' ? 'bg-blue-600' : 'bg-gray-200'
              }`}
            >
              <span
                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                  spreadViewMode === 'signed' ? 'translate-x-6' : 'translate-x-1'
                }`}
              />
            </button>
            <span className="text-sm text-gray-600">By Side</span>
          </div>
        </div>
        <div className="bg-white p-6 rounded-lg shadow-md">
          {/* Header Row */}
          <div className="flex items-center py-2 mb-2 border-b border-gray-100">
            <div className="text-xs font-medium text-gray-400 w-32 text-left">CATEGORY</div>
            <div className="text-xs font-medium text-gray-400 w-16 text-center">CORRECT</div>
            <div className="text-xs font-medium text-gray-400 w-16 text-center">TOTAL</div>
            <div className="text-xs font-medium text-gray-400 w-20 text-center">SUCCESS</div>
            <div className="text-xs font-medium text-gray-400 flex-1 ml-6">VOLUME</div>
          </div>
          <div className="space-y-1">
            {spreadAnalytics.map((range, index) => {
              // Add section headers and separator for signed mode
              const showUnderdogHeader = spreadViewMode === 'signed' && index === 0;
              const showFavoriteHeader = spreadViewMode === 'signed' && 
                index === spreadAnalytics.findIndex(r => r.range.startsWith('Favorite'));
              
              // Clean label - remove "Favorite"/"Underdog" prefix
              const cleanLabel = spreadViewMode === 'signed' 
                ? range.range.replace(/^(Favorite|Underdog) /, '')
                : range.range;
              
              return (
                <div key={range.range}>
                  {showUnderdogHeader && (
                    <div className="mb-3">
                      <div className="text-xs font-semibold text-gray-500 uppercase tracking-wider">UNDERDOGS</div>
                    </div>
                  )}
                  {showFavoriteHeader && (
                    <div className="py-4">
                      <div className="border-t border-gray-300 mb-4"></div>
                      <div className="text-xs font-semibold text-gray-500 uppercase tracking-wider">FAVORITES</div>
                    </div>
                  )}
                  <BarChart 
                    label={cleanLabel} 
                    data={range}
                  />
                </div>
              );
            })}
          </div>
        </div>
      </div>

      {/* Most Popular Teams */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">⭐ Most Popular Teams</h3>
        <div className="bg-white rounded-lg shadow-md">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Team</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Times Picked</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Correct</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Success Rate</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {mostPopularTeams.map(team => (
                  <tr key={team.team}>
                    <td className="px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      <div className="flex items-center">
                        <img 
                          src={`https://a.espncdn.com/i/teamlogos/nfl/500/${teamAbbreviations[team.team] || 'nfl'}.png`}
                          alt={`${team.team} logo`}
                          className="w-8 h-8 mr-3"
                          onError={(e) => {
                            e.currentTarget.src = 'https://a.espncdn.com/i/teamlogos/nfl/500/nfl.png';
                          }}
                        />
                        {team.team}
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      {team.picked}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      {team.correct}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      {team.percentage}%
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {/* Legend */}
      <div className="mt-8 p-4 bg-gray-50 rounded-lg">
        <h4 className="font-semibold text-gray-900 mb-2">How to Read the Charts:</h4>
        <div className="text-sm text-gray-700 space-y-1">
          <div>• <strong>Bar length</strong> = Total volume relative to highest category (max: {globalMaxVolume} picks)</div>
          <div>• <strong>Green fill</strong> = Portion that were correct</div>
          <div>• <strong>Numbers in bar</strong> = Correct/Total fraction and success percentage</div>
          <div>• All bars use the same scale for true volume comparison</div>
        </div>
      </div>
    </div>
  );
}

interface InsightsProps {
  picks: Pick[];
  users: User[];
  games: Game[];
}

function Insights({ picks, users, games }: InsightsProps) {
  // Helper function to get all graded team picks
  const getAllGradedPicks = () => {
    return picks.flatMap(userPick => 
      userPick.picks.filter(teamPick => teamPick.correct !== null && teamPick.correct !== undefined)
    );
  };

  // Helper function to find game data for a pick
  const getGameForPick = (teamPick: TeamPick) => {
    return games.find(game => 
      game.id === teamPick.gameId || 
      game.away === teamPick.team || 
      game.home === teamPick.team
    );
  };

  const gradedPicks = getAllGradedPicks();

  // Team Performance Analytics
  const getTeamAnalytics = () => {
    const teamStats: { [key: string]: { picked: number; correct: number } } = {};
    
    gradedPicks.forEach(pick => {
      if (!teamStats[pick.team]) {
        teamStats[pick.team] = { picked: 0, correct: 0 };
      }
      teamStats[pick.team].picked++;
      if (pick.correct) teamStats[pick.team].correct++;
    });

    return Object.entries(teamStats)
      .map(([team, stats]) => ({
        team,
        picked: stats.picked,
        correct: stats.correct,
        percentage: Math.round((stats.correct / stats.picked) * 100)
      }))
      .sort((a, b) => b.picked - a.picked);
  };

  // Underdog vs Favorite Analytics
  const getUnderdogFavoriteAnalytics = () => {
    let favoriteStats = { picked: 0, correct: 0 };
    let underdogStats = { picked: 0, correct: 0 };

    gradedPicks.forEach(pick => {
      const spread = pick.spread;
      if (spread < 0) { // Negative spread = favorite
        favoriteStats.picked++;
        if (pick.correct) favoriteStats.correct++;
      } else { // Positive spread = underdog
        underdogStats.picked++;
        if (pick.correct) underdogStats.correct++;
      }
    });

    return {
      favorites: {
        ...favoriteStats,
        percentage: favoriteStats.picked > 0 ? Math.round((favoriteStats.correct / favoriteStats.picked) * 100) : 0
      },
      underdogs: {
        ...underdogStats,
        percentage: underdogStats.picked > 0 ? Math.round((underdogStats.correct / underdogStats.picked) * 100) : 0
      }
    };
  };

  // Home vs Away Analytics
  const getHomeAwayAnalytics = () => {
    let homeStats = { picked: 0, correct: 0 };
    let awayStats = { picked: 0, correct: 0 };

    gradedPicks.forEach(pick => {
      const game = getGameForPick(pick);
      if (!game) return;

      if (game.home === pick.team) {
        homeStats.picked++;
        if (pick.correct) homeStats.correct++;
      } else {
        awayStats.picked++;
        if (pick.correct) awayStats.correct++;
      }
    });

    return {
      home: {
        ...homeStats,
        percentage: homeStats.picked > 0 ? Math.round((homeStats.correct / homeStats.picked) * 100) : 0
      },
      away: {
        ...awayStats,
        percentage: awayStats.picked > 0 ? Math.round((awayStats.correct / awayStats.picked) * 100) : 0
      }
    };
  };

  // Spread Range Analytics
  const getSpreadAnalytics = () => {
    const spreadRanges: { [key: string]: { picked: number; correct: number } } = {};
    
    gradedPicks.forEach(pick => {
      const spread = Math.abs(pick.spread);
      let range;
      
      if (spread <= 3) range = '1-3 points';
      else if (spread <= 6) range = '3.5-6 points';
      else if (spread <= 10) range = '6.5-10 points';
      else range = '10+ points';

      if (!spreadRanges[range]) {
        spreadRanges[range] = { picked: 0, correct: 0 };
      }
      spreadRanges[range].picked++;
      if (pick.correct) spreadRanges[range].correct++;
    });

    return Object.entries(spreadRanges)
      .map(([range, stats]) => ({
        range,
        picked: stats.picked,
        correct: stats.correct,
        percentage: Math.round((stats.correct / stats.picked) * 100)
      }))
      .sort((a, b) => {
        const order = ['1-3 points', '3.5-6 points', '6.5-10 points', '10+ points'];
        return order.indexOf(a.range) - order.indexOf(b.range);
      });
  };

  const teamAnalytics = getTeamAnalytics();
  const underdogFavorite = getUnderdogFavoriteAnalytics();
  const homeAway = getHomeAwayAnalytics();
  const spreadAnalytics = getSpreadAnalytics();

  const StatCard = ({ title, stats, subtitle }: { title: string; stats: any; subtitle?: string }) => (
    <div className="bg-gray-50 p-4 rounded-lg">
      <h4 className="font-semibold text-gray-900 mb-2">{title}</h4>
      <div className="text-2xl font-bold text-blue-600">
        {stats.correct}/{stats.picked} ({stats.percentage}%)
      </div>
      {subtitle && <div className="text-sm text-gray-600">{subtitle}</div>}
    </div>
  );

  return (
    <div className="space-y-8">
      {/* Overview Stats */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="bg-blue-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-blue-600">{gradedPicks.length}</div>
          <div className="text-sm text-blue-700">Total Picks Analyzed</div>
        </div>
        <div className="bg-green-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-green-600">{gradedPicks.filter(p => p.correct).length}</div>
          <div className="text-sm text-green-700">Correct Picks</div>
        </div>
        <div className="bg-red-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-red-600">{gradedPicks.filter(p => !p.correct).length}</div>
          <div className="text-sm text-red-700">Incorrect Picks</div>
        </div>
        <div className="bg-purple-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-purple-600">{teamAnalytics.length}</div>
          <div className="text-sm text-purple-700">Teams Picked</div>
        </div>
      </div>

      {/* Favorites vs Underdogs */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">🎯 Favorites vs Underdogs</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <StatCard 
            title="Favorites (- spread)" 
            stats={underdogFavorite.favorites}
            subtitle="Teams favored to win"
          />
          <StatCard 
            title="Underdogs (+ spread)" 
            stats={underdogFavorite.underdogs}
            subtitle="Teams getting points"
          />
        </div>
      </div>

      {/* Home vs Away */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">🏠 Home vs Away Teams</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <StatCard 
            title="Home Teams" 
            stats={homeAway.home}
            subtitle="Playing at home"
          />
          <StatCard 
            title="Away Teams" 
            stats={homeAway.away}
            subtitle="Playing on the road"
          />
        </div>
      </div>

      {/* Spread Ranges */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">📊 Performance by Spread Size</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {spreadAnalytics.map(range => (
            <StatCard 
              key={range.range}
              title={range.range} 
              stats={range}
              subtitle="Spread range"
            />
          ))}
        </div>
      </div>

      {/* Most Picked Teams */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">⭐ Most Popular Teams</h3>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Team</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Times Picked</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Correct</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Success Rate</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {teamAnalytics.slice(0, 10).map(team => (
                <tr key={team.team}>
                  <td className="px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {team.team}
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">
                    {team.picked}
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">
                    {team.correct}
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                    <span className={`px-2 py-1 rounded text-xs font-semibold ${
                      team.percentage >= 60 ? 'bg-green-100 text-green-800' :
                      team.percentage >= 50 ? 'bg-yellow-100 text-yellow-800' :
                      team.percentage > 0 ? 'bg-red-100 text-red-800' :
                      'bg-gray-100 text-gray-500'
                    }`}>
                      {team.percentage}%
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

export default App;
